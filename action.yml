name: 'Setup pnpm with efficient caching'
description: 'Run pnpm install with efficient caching'

inputs:
  cwd:
    description: "Changes node's process.cwd() if the project is not located on the root. Default to process.cwd()"
    required: false
    default: '.'
  version:
    description: Version of pnpm to install
    required: false
  dest:
    description: Where to store pnpm files
    required: false
    default: ~/setup-pnpm
  run_install:
    description: If specified, run `pnpm install`
    required: false
    default: 'true'
  package_json_file:
    description: File path to the package.json to read "packageManager" configuration
    required: false
    default: 'package.json'
  standalone:
    description: When set to true, @pnpm/exe, which is a Node.js bundled package, will be installed, enabling using pnpm without Node.js.
    required: false
    default: 'false'
  build-cache:
    description: Whether the action is being used to build the cache or not
    required: false
    default: 'false'

outputs:
  cache-hit:
    description: Whether the cache hit or not
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.version }}
        dest: ${{ inputs.dest }}
        package_json_file: ${{ inputs.package_json_file }}
        standalone: ${{ inputs.standalone }}

    - name: Expose pnpm config(s) through "$GITHUB_OUTPUT"
      id: pnpm-config
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - uses: actions/cache@v3
      name: Setup pnpm cache
      id: cache-lookup
      with:
        lookup-only: true
        path: ${{ steps.pnpm-config.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-cache-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-cache-    
          
    - uses: actions/cache@v3
      if: ${{ inputs.build-cache != 'true' || steps.cache-lookup.outputs.cache-hit != 'true' }}
      name: Setup pnpm cache
      id: cache
      with:
        path: ${{ steps.pnpm-config.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-cache-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-cache-

    - name: Prune pnpm store
      if: ${{ steps.cache-lookup.outputs.cache-hit != 'true' }}
      shell: bash
      run: pnpm prune store

    - name: Install dependencies
      if: ${{ inputs.run_install == 'true' && (inputs.build-cache != 'true' || steps.cache-lookup.outputs.cache-hit != 'true') }}
      shell: bash
      working-directory: ${{ inputs.cwd }}
      run: pnpm install --frozen-lockfile --prefer-offline
      env:
        # Other environment variables
        HUSKY: '0' # By default do not run HUSKY install
